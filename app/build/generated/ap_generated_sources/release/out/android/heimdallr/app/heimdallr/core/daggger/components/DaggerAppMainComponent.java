// Generated by Dagger (https://dagger.dev).
package android.heimdallr.app.heimdallr.core.daggger.components;

import android.heimdallr.app.heimdallr.HeimdallrApplication;
import android.heimdallr.app.heimdallr.core.daggger.modules.externaldependency.ActivityModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.ContextModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.ContextModule_ContextFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.GsonConverterModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.NetworkModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.NetworkModule_CacheFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.NetworkModule_CacheFileFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.NetworkModule_LoggingInterceptorFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.NetworkModule_OkHttpClientFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.RetrofitModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.RetrofitModule_ProvideRetrofitFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.RxCallAdapterFactoryModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.network.RxCallAdapterFactoryModule_ProvideRxJavaCallAdapterFactoryFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.DataStoreModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.DataStoreModule_ProvideDataStoreFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.OfflineStoreModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.OfflineStoreModule_ProvideOfflineStoreFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.OnlineStoreModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.OnlineStoreModule_ProvideOnlineStoreFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.RoomManagerModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.store.RoomManagerModule_ProvideRealmManagerFactory;
import android.heimdallr.app.heimdallr.core.daggger.modules.viewmodels.CoreViewModelModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.viewmodels.LauncherActivityViewModelModule;
import android.heimdallr.app.heimdallr.core.daggger.modules.viewmodels.LauncherActivityViewModelModule_ProvideLauncherActivityViewModelFactory;
import android.heimdallr.app.heimdallr.core.daggger.permissions.PermissionsManagerModule;
import android.heimdallr.app.heimdallr.core.database.DataStore;
import android.heimdallr.app.heimdallr.core.database.OfflineStore;
import android.heimdallr.app.heimdallr.core.database.OnlineStore;
import android.heimdallr.app.heimdallr.core.views.CoreActivity;
import android.heimdallr.app.heimdallr.screens.activities.LauncherActivity;
import android.heimdallr.app.heimdallr.screens.activities.LauncherActivity_MembersInjector;
import android.heimdallr.app.heimdallr.screens.activities.MainActivity;
import android.heimdallr.app.heimdallr.screens.viewmodels.LauncherActivityViewModel;
import dagger.internal.Preconditions;
import java.io.File;
import okhttp3.Cache;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppMainComponent implements AppMainComponent {
  private final RoomManagerModule roomManagerModule;

  private final OfflineStoreModule offlineStoreModule;

  private final NetworkModule networkModule;

  private final ContextModule contextModule;

  private final RxCallAdapterFactoryModule rxCallAdapterFactoryModule;

  private final RetrofitModule retrofitModule;

  private final OnlineStoreModule onlineStoreModule;

  private final DataStoreModule dataStoreModule;

  private final LauncherActivityViewModelModule launcherActivityViewModelModule;

  private DaggerAppMainComponent(ContextModule contextModuleParam,
      RetrofitModule retrofitModuleParam, NetworkModule networkModuleParam,
      RxCallAdapterFactoryModule rxCallAdapterFactoryModuleParam,
      LauncherActivityViewModelModule launcherActivityViewModelModuleParam,
      DataStoreModule dataStoreModuleParam, OfflineStoreModule offlineStoreModuleParam,
      RoomManagerModule roomManagerModuleParam, OnlineStoreModule onlineStoreModuleParam) {
    this.roomManagerModule = roomManagerModuleParam;
    this.offlineStoreModule = offlineStoreModuleParam;
    this.networkModule = networkModuleParam;
    this.contextModule = contextModuleParam;
    this.rxCallAdapterFactoryModule = rxCallAdapterFactoryModuleParam;
    this.retrofitModule = retrofitModuleParam;
    this.onlineStoreModule = onlineStoreModuleParam;
    this.dataStoreModule = dataStoreModuleParam;
    this.launcherActivityViewModelModule = launcherActivityViewModelModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private OfflineStore getOfflineStore() {
    return OfflineStoreModule_ProvideOfflineStoreFactory.provideOfflineStore(offlineStoreModule, RoomManagerModule_ProvideRealmManagerFactory.provideRealmManager(roomManagerModule));}

  private File getFile() {
    return NetworkModule_CacheFileFactory.cacheFile(networkModule, ContextModule_ContextFactory.context(contextModule));}

  private Cache getCache() {
    return NetworkModule_CacheFactory.cache(networkModule, getFile());}

  private OkHttpClient getOkHttpClient() {
    return NetworkModule_OkHttpClientFactory.okHttpClient(networkModule, NetworkModule_LoggingInterceptorFactory.loggingInterceptor(networkModule), getCache());}

  private Retrofit getRetrofit() {
    return RetrofitModule_ProvideRetrofitFactory.provideRetrofit(retrofitModule, getOkHttpClient(), RxCallAdapterFactoryModule_ProvideRxJavaCallAdapterFactoryFactory.provideRxJavaCallAdapterFactory(rxCallAdapterFactoryModule));}

  private OnlineStore getOnlineStore() {
    return OnlineStoreModule_ProvideOnlineStoreFactory.provideOnlineStore(onlineStoreModule, getRetrofit());}

  private DataStore getDataStore() {
    return DataStoreModule_ProvideDataStoreFactory.provideDataStore(dataStoreModule, getOfflineStore(), getOnlineStore());}

  private LauncherActivityViewModel getLauncherActivityViewModel() {
    return LauncherActivityViewModelModule_ProvideLauncherActivityViewModelFactory.provideLauncherActivityViewModel(launcherActivityViewModelModule, getDataStore(), getRetrofit());}

  @Override
  public void inject(MainActivity homeActivity) {
  }

  @Override
  public void inject(LauncherActivity homeActivity) {
    injectLauncherActivity(homeActivity);}

  @Override
  public void inject(HeimdallrApplication application) {
  }

  @Override
  public void inject(CoreActivity coreActivity) {
  }

  private LauncherActivity injectLauncherActivity(LauncherActivity instance) {
    LauncherActivity_MembersInjector.injectLauncherActivityViewModel(instance, getLauncherActivityViewModel());
    return instance;
  }

  public static final class Builder {
    private ContextModule contextModule;

    private RetrofitModule retrofitModule;

    private NetworkModule networkModule;

    private RxCallAdapterFactoryModule rxCallAdapterFactoryModule;

    private LauncherActivityViewModelModule launcherActivityViewModelModule;

    private DataStoreModule dataStoreModule;

    private OfflineStoreModule offlineStoreModule;

    private RoomManagerModule roomManagerModule;

    private OnlineStoreModule onlineStoreModule;

    private Builder() {
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder coreViewModelModule(CoreViewModelModule coreViewModelModule) {
      Preconditions.checkNotNull(coreViewModelModule);
      return this;
    }

    public Builder retrofitModule(RetrofitModule retrofitModule) {
      this.retrofitModule = Preconditions.checkNotNull(retrofitModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder gsonConverterModule(GsonConverterModule gsonConverterModule) {
      Preconditions.checkNotNull(gsonConverterModule);
      return this;
    }

    public Builder rxCallAdapterFactoryModule(
        RxCallAdapterFactoryModule rxCallAdapterFactoryModule) {
      this.rxCallAdapterFactoryModule = Preconditions.checkNotNull(rxCallAdapterFactoryModule);
      return this;
    }

    public Builder launcherActivityViewModelModule(
        LauncherActivityViewModelModule launcherActivityViewModelModule) {
      this.launcherActivityViewModelModule = Preconditions.checkNotNull(launcherActivityViewModelModule);
      return this;
    }

    public Builder dataStoreModule(DataStoreModule dataStoreModule) {
      this.dataStoreModule = Preconditions.checkNotNull(dataStoreModule);
      return this;
    }

    public Builder offlineStoreModule(OfflineStoreModule offlineStoreModule) {
      this.offlineStoreModule = Preconditions.checkNotNull(offlineStoreModule);
      return this;
    }

    public Builder roomManagerModule(RoomManagerModule roomManagerModule) {
      this.roomManagerModule = Preconditions.checkNotNull(roomManagerModule);
      return this;
    }

    public Builder onlineStoreModule(OnlineStoreModule onlineStoreModule) {
      this.onlineStoreModule = Preconditions.checkNotNull(onlineStoreModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder permissionsManagerModule(PermissionsManagerModule permissionsManagerModule) {
      Preconditions.checkNotNull(permissionsManagerModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder activityModule(ActivityModule activityModule) {
      Preconditions.checkNotNull(activityModule);
      return this;
    }

    public AppMainComponent build() {
      Preconditions.checkBuilderRequirement(contextModule, ContextModule.class);
      if (retrofitModule == null) {
        this.retrofitModule = new RetrofitModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (rxCallAdapterFactoryModule == null) {
        this.rxCallAdapterFactoryModule = new RxCallAdapterFactoryModule();
      }
      if (launcherActivityViewModelModule == null) {
        this.launcherActivityViewModelModule = new LauncherActivityViewModelModule();
      }
      if (dataStoreModule == null) {
        this.dataStoreModule = new DataStoreModule();
      }
      if (offlineStoreModule == null) {
        this.offlineStoreModule = new OfflineStoreModule();
      }
      if (roomManagerModule == null) {
        this.roomManagerModule = new RoomManagerModule();
      }
      if (onlineStoreModule == null) {
        this.onlineStoreModule = new OnlineStoreModule();
      }
      return new DaggerAppMainComponent(contextModule, retrofitModule, networkModule, rxCallAdapterFactoryModule, launcherActivityViewModelModule, dataStoreModule, offlineStoreModule, roomManagerModule, onlineStoreModule);
    }
  }
}
