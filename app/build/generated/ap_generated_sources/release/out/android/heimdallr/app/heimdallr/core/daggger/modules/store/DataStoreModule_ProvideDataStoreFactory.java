// Generated by Dagger (https://dagger.dev).
package android.heimdallr.app.heimdallr.core.daggger.modules.store;

import android.heimdallr.app.heimdallr.core.database.DataStore;
import android.heimdallr.app.heimdallr.core.database.OfflineStore;
import android.heimdallr.app.heimdallr.core.database.OnlineStore;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataStoreModule_ProvideDataStoreFactory implements Factory<DataStore> {
  private final DataStoreModule module;

  private final Provider<OfflineStore> offlineStoreProvider;

  private final Provider<OnlineStore> onlineStoreProvider;

  public DataStoreModule_ProvideDataStoreFactory(DataStoreModule module,
      Provider<OfflineStore> offlineStoreProvider, Provider<OnlineStore> onlineStoreProvider) {
    this.module = module;
    this.offlineStoreProvider = offlineStoreProvider;
    this.onlineStoreProvider = onlineStoreProvider;
  }

  @Override
  public DataStore get() {
    return provideDataStore(module, offlineStoreProvider.get(), onlineStoreProvider.get());
  }

  public static DataStoreModule_ProvideDataStoreFactory create(DataStoreModule module,
      Provider<OfflineStore> offlineStoreProvider, Provider<OnlineStore> onlineStoreProvider) {
    return new DataStoreModule_ProvideDataStoreFactory(module, offlineStoreProvider, onlineStoreProvider);
  }

  public static DataStore provideDataStore(DataStoreModule instance, OfflineStore offlineStore,
      OnlineStore onlineStore) {
    return Preconditions.checkNotNull(instance.provideDataStore(offlineStore, onlineStore), "Cannot return null from a non-@Nullable @Provides method");
  }
}
