// Generated by Dagger (https://google.github.io/dagger).
package android.heimdallr.app.heimdallr.core.daggger.modules.store;

import android.heimdallr.app.heimdallr.core.database.DataStore;
import android.heimdallr.app.heimdallr.core.database.OfflineStore;
import android.heimdallr.app.heimdallr.core.database.OnlineStore;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DataStoreModule_ProvideDataStoreFactory implements Factory<DataStore> {
  private final DataStoreModule module;

  private final Provider<OfflineStore> offlineStoreProvider;

  private final Provider<OnlineStore> onlineStoreProvider;

  public DataStoreModule_ProvideDataStoreFactory(
      DataStoreModule module,
      Provider<OfflineStore> offlineStoreProvider,
      Provider<OnlineStore> onlineStoreProvider) {
    this.module = module;
    this.offlineStoreProvider = offlineStoreProvider;
    this.onlineStoreProvider = onlineStoreProvider;
  }

  @Override
  public DataStore get() {
    return Preconditions.checkNotNull(
        module.provideDataStore(offlineStoreProvider.get(), onlineStoreProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static DataStoreModule_ProvideDataStoreFactory create(
      DataStoreModule module,
      Provider<OfflineStore> offlineStoreProvider,
      Provider<OnlineStore> onlineStoreProvider) {
    return new DataStoreModule_ProvideDataStoreFactory(
        module, offlineStoreProvider, onlineStoreProvider);
  }

  public static DataStore proxyProvideDataStore(
      DataStoreModule instance, OfflineStore offlineStore, OnlineStore onlineStore) {
    return Preconditions.checkNotNull(
        instance.provideDataStore(offlineStore, onlineStore),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
